#!/usr/bin/python

################################################
#  This script scans the text files generated by 
# "omegaveto" and finds all triggers that were
# vetoed in zero-lag, placing them in a database.
#  Information includes relevant pseudochannel, GW
# channel, as well as central times and central
# frequencies.
################################################

import os
import sys
import shutil
import re
import optparse
import os.path
import re
import sqlite3 as lite
import sys

from numpy import sqrt
#from numpy import matrix

from bcv import git_version

##############################FUNCTIONS##############################
def parse_commandline():
        """
        Parse the options given on the command-line.
        """
        parser = optparse.OptionParser(usage = __doc__,version=git_version.verbose_msg)

        parser.add_option("-G", "--GWChannel", default='L1:OAF-CAL_DARM_DQ',
                      help="Name of channel from which to gather triggers for database. Please include IFO with ':'")
        parser.add_option("-P", "--fpath", default="",
                      help="Path, if desired, in which to place results.")

        opts, args = parser.parse_args()

        return opts
########################MAIN####################################

opts = parse_commandline()

IFOGW = opts.GWChannel
filepath = opts.fpath
if filepath == "":
        database = 'selected_triggers.db'
        textfile = 'selected_triggers.txt'
	diffile = 'differences.txt'
else:
        database = filepath + '/selected_triggers.db'
        textfile = filepath + '/selected_triggers.txt'
	diffile = filepath + '/differences.txt'

p_directories = []
diffs = []
con = lite.connect(database)
triggers_db = []
id = 0
#first loop to find appropriate pseudochannel directories
p_directories = os.listdir('results')
#print >> sys.stderr, "%s"%p_directories
output = open(textfile,'w')
for line in p_directories:
	triggers_db = []
	output.write('# ' + line + '\n')
	triggers_db.append(id)
	#id = id + 1
	triggers_db.append(IFOGW)
	triggers_db.append(line)
	threshold = 1.0  #0.1 worked well as a default
	print >> sys.stderr, "%lf"%threshold
	summary_ind = 0
	segments = []
	segments = os.listdir('results/' + line)
	#print >> sys.stderr, "%s"%segments
	#summary_ind = segments.index('summary.txt')
	if 'summary.txt' in segments:
		summary = open('results/' + line + '/' + 'summary.txt', 'r')
		z = 0	
		for items in summary:
			if z==0:
				thresh_string = items
				thresh_array = thresh_string.split()			
				threshold = float(thresh_array[1])
				print >> sys.stderr, "%lf"%threshold
			if z == 6:
				sig_string = items
                                sig_array = sig_string.split()
                                significance = float(sig_array[1])
                                print >> sys.stderr, "%lf"%significance
			z = z + 1
		summary.close()
		output.write('### r_thresh = ' + str(threshold) + '\n')
		triggers_db.append(float(threshold))
		output.write('### veto significance = ' + str(significance) + '\n')
	for lines in segments:
		if os.path.isdir('results/' + line + '/' + lines) == True:
			#output.write('## ' + lines + '\n')
			seg_contents = []
			seg_contents = os.listdir('results/' + line + '/' + lines)
			#print >> sys.stderr, "%s"%seg_contents
			if any('corrstat_timeshift0' in item for item in seg_contents):
				output.write('## ' + lines + '\n')
				file = filter(lambda x: 'corrstat_timeshift0' in x, seg_contents)
				print >> sys.stderr, "Found it!! -> %s"%file
				seg = open('results/' + line + '/' + lines + '/' + str(file)[2:-2], 'r')
				for lineD in seg:
					line_breakup = lineD.split()
					if abs(float(line_breakup[1])) >= float(threshold):
						output.write(lineD)
						output.write(' # difference: ' + str(abs(float(line_breakup[1])) - threshold) + '\n')
						diffs.append(abs(float(line_breakup[1])) - threshold)
						try:
							triggers_db[4] = abs(float(line_breakup[1])) - threshold
						except IndexError:
							triggers_db.append(abs(float(line_breakup[1])) - threshold)
						try:
							triggers_db[5] = float(significance)
						except IndexError:
							triggers_db.append(float(significance))
						try:
							triggers_db[6] = lines
						except IndexError:
							triggers_db.append(lines)
						i = 7
						for index in line_breakup:
							try:
								triggers_db[i] = float(index)
							except IndexError:
								triggers_db.append(float(index))
							i = i + 1
						with con:
							cur = con.cursor()
							#print >> sys.stderr, "triggers_db: %s"%triggers_db[1]
							cur.execute("CREATE TABLE IF NOT EXISTS vTriggers(Id INT, GW TEXT, Pseudochannel TEXT, rthresh REAL, Difference REAL, Veto_significance REAL, w_segment TEXT, Timeshift REAL, r REAL, r_max REAL, trigHCentralTime REAL, trigXCentralTime REAL, trigHCentralFreq REAL, trigXCentralFreq REAL, trigH_significance REAL, trigX_significance REAL, trigH_duration REAL, trigX_duration REAL, meanY REAL, varY REAL, maxY REAL, minY REAL)")
							#cur.execute("INSERT INTO vTriggers VALUES(%d, %s, %s,%lf, %lf, %lf, %s, %lf, %lf, %lf, %lf, %lf, %lf, %lf, %lf, %lf, %lf, %lf, %lf, %lf, %lf, %lf)"%((triggers_db[0]),(triggers_db[1]),(triggers_db[2]),(triggers_db[3]),(triggers_db[4]),(triggers_db[5]),(triggers_db[6]),(triggers_db[7]),(triggers_db[8]),(triggers_db[9]),(triggers_db[10]),(triggers_db[11]),(triggers_db[12]),(triggers_db[13]),(triggers_db[14]),(triggers_db[15]),(triggers_db[16]),(triggers_db[17]),(triggers_db[18]),(triggers_db[19]),(triggers_db[20]),(triggers_db[21])))
							cur.execute("INSERT INTO vTriggers VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", ((triggers_db[0]),(triggers_db[1]),(triggers_db[2]),(triggers_db[3]),(triggers_db[4]),(triggers_db[5]),(triggers_db[6]),(triggers_db[7]),(triggers_db[8]),(triggers_db[9]),(triggers_db[10]),(triggers_db[11]),(triggers_db[12]),(triggers_db[13]),(triggers_db[14]),(triggers_db[15]),(triggers_db[16]),(triggers_db[17]),(triggers_db[18]),(triggers_db[19]),(triggers_db[20]),(triggers_db[21])))
						id = id + 1
						triggers_db[0] = id
				seg.close()
			
			#print >> sys.stderr, "Nope..."
if diffs:
	differences = open(diffile,'w')
	differences.write('Greatest difference: ' + str(max(diffs)) + '\n' )
	differences.write('#################################' + '\n')
	differences.write('# Differences (from greatest to least):' + '\n')
	diffs.sort()
	diffs.reverse()
	for line in diffs:
		differences.write(str(line) + '\n')
	differences.close()

output.close()
