#!/usr/bin/python

# =============================================================================
#
#                               PREAMBLE
#
# =============================================================================


from __future__ import division

import os
import sys
import optparse
import os.path
import glob

from bcv import git_version

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser(usage = __doc__,version=git_version.verbose_msg)

    parser.add_option("-e", "--optExepath",
                      help="Path to compilied tvecCoherence.", default = "tvarCoherence")
    parser.add_option("-c", "--Central_Time",
                      help="Central time of the segment to be analyzed.")
    #parser.add_option("-s", "--fs", default=16384)
    parser.add_option("-f", "--Channel_A", default = "L1:OAF-CAL_DARM_DQ")
    parser.add_option("-F", "--Channel_B")
    parser.add_option("-d", "--Segment_Duration", default = 3)
    parser.add_option("-n", "--ExperimentTimeMin", default = 0.1)
    parser.add_option("-x", "--ExperimentTimeMax", default = 2.0)
    parser.add_option("-i", "--increment", default = 0.1)
    parser.add_option("-C", "--count", default = 0)
    parser.add_option("-M", "--multiplier", default = 1.0)

    opts, args = parser.parse_args()
    return opts

# =============================================================================
#
#                                    Main
#
# =============================================================================

def main():
	## parse the command line
	opts = parse_commandline()

	#c_directory = os.listdir('cache/*.lcf')
	c_directory = glob.glob('cache/*.lcf')
	
	gwFile = []
	# Temp --------------------------------
	#cTime = 1102757206.0  # central time
	#cTime = 1102809664
	cTime = float(opts.Central_Time)
	#fs = float(opts.fs)
	fchA = opts.Channel_A
	#fchB = "L1:TCS-ITMY_CO2_ISS_IN_AC_OUT_DQ"
	fchB = opts.Channel_B

	fs_multiplier = float(opts.multiplier)
	#start_time = 1102809662
	#end_time = 1102809666

	tprefix = str(cTime)
	tprefix = tprefix[0:5]
	
	print >> sys.stderr, "Time Prefix: %s"%tprefix

	tsDur = float(opts.Segment_Duration)
	tslMin = float(opts.ExperimentTimeMin)
	tslMax = float(opts.ExperimentTimeMax)
	increment = opts.increment

	#exepath = 'tvarCoherence'
	exepath = opts.optExepath

	count = opts.count
	# -------------------------------------

	start_time = cTime - ((tsDur + 1)/2)
	end_time = cTime + ((tsDur + 1)/2)

	ctSp = str(cTime).split('.')
	digit = ctSp[0][len(ctSp[0])-5]
	#print >> sys.stderr, "Digit: %s"%digit
	#count = 0
	#pathIndex = 0

	for file in c_directory:
		path = []
		tfilename = file[0:(len(file)-4)]
		filename = tfilename.split("-")
		#print >> sys.stderr, "%s"%filename
		start =float(filename[2])
		end = float(filename[2]) + float(filename[3])
		ctSp = str(end).split('.')
		digit1 = ctSp[0][len(ctSp[0])-5]
		if (cTime<=end) and (cTime>=start):
			print >> sys.stderr, "Found it: %s"%file
			infile = open(file,'r')
			for item in infile:
				fullLine = item.split()
				path.append(fullLine[5])		
				print >> sys.stderr, "Path(s): %s"%path
				#framePath = fullLine[5]
			infile.close()
			for precord in path:
				qstring = precord+'/*'+tprefix+'['+digit+'-'+digit1+']'+'*'
				print >> sys.stderr, "Querry String: %s"%qstring	
				gw_dir = glob.glob(qstring)
				gw_dir.sort()
				#print >> sys.stderr, "Files(s): %s"%gw_dir
				for file in gw_dir:
					fileTimeArr = file.split("/")
					fileTimeArr = fileTimeArr[len(fileTimeArr)-1]
					fileTimeArr = fileTimeArr.split("-")
					fileTime = fileTimeArr[2]			
					#print >> sys.stderr, "Files(s): %s"%fileTime
					if cTime > float(fileTime):
						gwFile = file
				if gwFile:
					print >> sys.stderr, "Files(s): %s"%gwFile
				else:
					print >> sys.stderr, "WARNING: No file located!"
					fdirstring = "bcvCoherTime_Results/nofile_(" + str(count) + ")"
					os.mkdir(fdirstring,0775)
					sys.exit()	
	#print >> sys.stderr, "PI: %s"%pathIndex

	#framePath = path[pathIndex]
	frameFile = gwFile.split("/")

	framePath = "/"
	framePath = framePath.join(frameFile[0:len(frameFile)-1])

	#framePath = " "

	frameFile = frameFile[len(frameFile)-1]

	if not os.path.exists("bcvCoherTime_Results"):
                os.mkdir("bcvCoherTime_Results",0777)

	if not os.path.exists("tests"):
		os.mkdir("tests",0777)
	else:
		resStr = "tests"
                renres = resStr
                num = 1
                while os.path.isdir(renres):
                        #renresA = renres
                        renres = resStr + "_" + str(num)
                        num = num + 1
                os.rename(resStr,renres)
                os.mkdir(resStr,0777)
	#cmd = "source inputfiles/MatlabSetup_R2008a_glnxa64.sh; %s %s %s %s %s %f %d %d %s %s %d %d %d %d"%(opts.omegaveto_bin,
#            opts.segmentFile,
#            opts.configurationFile, frameCacheFile, opts.couplingModel,
#            opts.highPassCutoff, opts.SNRcutoffX, opts.SNRcutoffH,
#            opts.outDir, os.path.basename(opts.logFile),
#            opts.timeShiftMin, opts.timeShiftMax, opts.numTimeShifts,
#            opts.debugLevel)

	cmd = "source inputfiles/MatlabSetup_R2008a_glnxa64.sh; %s %s %s %s %s %f %f %f %f %f %f %d"%(exepath,
            fchA,
            fchB, framePath, frameFile,
            start_time, end_time,
            increment, tslMin, tslMax, fs_multiplier, 0)

	print >> sys.stderr, "\n"
	print >> sys.stderr, "cmd: %s"%cmd
	print >> sys.stderr, "\n"
	print >> sys.stderr, "Running 'tvarCoherence'..."

	#exit = os.system(cmd)
	os.system(cmd)
#	count = count + 1
	dir_name = "bcvCoherTime_Results/bcvCohTime_(" + str(count)+ ")_" + str(cTime) + "_" + fchA + "+" + fchB

	if not os.path.exists(dir_name):
		os.rename("tests",dir_name)

#if exit > 0:
#      print >> sys.stderr, "Error tvarCoherence failed"
#      sys.exit(1)

if __name__ == "__main__":
    main()
