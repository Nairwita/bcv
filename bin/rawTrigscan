#!/usr/bin/python

import os
import sys
import shutil
import re
import optparse
import os.path
import re
import sqlite3 as lite
import sys

from numpy import sqrt
#from numpy import matrix

from bcv import git_version

##############################FUNCTIONS##############################
def parse_commandline():
        """
        Parse the options given on the command-line.
        """
        parser = optparse.OptionParser(usage = __doc__,version=git_version.verbose_msg)

        parser.add_option("-C", "--Channel", default='OAF-CAL_DARM_DQ',
                      help="Name of channel from which to gather triggers for database.")

        opts, args = parser.parse_args()

        return opts
##################################################################
#  This script is similar to "trigscan_db," except it gathers all the
# GW triggers found by "gOmicron" (or "getKW") and places them into
# a database for analysis.
########################MAIN####################################
opts = parse_commandline()

trigFiles = []
gwChannel = opts.Channel
con = lite.connect('raw_channel_triggers_' + gwChannel + '.db')
id = 0

path = 'KWtrigs'
trigFiles = os.listdir(path)
for file in trigFiles:
	fileA = file.split(':')
	fileA = fileA[1]
	fileA = fileA.split('.')
	fileA = fileA[0]
	if fileA == gwChannel:
		print('Found it!...' + fileA)
		fileB = file

print fileB
input = open(path + '/' + fileB,'r')
for line in input:
	#print line
	lineA = line.split()
	#print lineA

	with con:
        	cur = con.cursor()
		cur.execute("CREATE TABLE IF NOT EXISTS rawTriggers(Id INT, startGPS REAL, endGPS REAL, centralGPS REAL, centralFreq REAL, snr REAL)")
		cur.execute("INSERT INTO rawTriggers VALUES(?, ?, ?, ?, ?, ?)", ((id),(lineA[0]),(lineA[1]),(lineA[2]),(lineA[3]),(lineA[8])))
		id = id + 1
#						triggers_db[0] = id
			
input.close()
