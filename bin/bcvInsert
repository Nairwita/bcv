#!/mnt/home1/detchar/opt/gwpysoft/bin/python
#
# Copyright (C) 2009  Tomoki Isogai
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

"""
%prog --result_dir=DIR [--outdir=DIR | --insert] --web_address=WEB_ADDRESS [options]

Tomoki Isogai (isogait@carleton.edu)

This program inserts veto segments from bilinear coupling veto.
"""

# =============================================================================
#
#                               PREAMBLE
#
# =============================================================================

from __future__ import division

import sys
import os
import re
import optparse

try:
    import sqlite3
except ImportError:
    # pre 2.5.x
    from pysqlite2 import dbapi2 as sqlite3

from glue.segments import segment, segmentlist
from glue import segmentsUtils

from bcv import git_version

from bcv import bcvUtils

__author__ = "Tomoki Isogai <isogait@carleton.edu>"
__date__ = "2010/5/17"
__version__ = "1.0"

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser(usage=__doc__,version=git_version.verbose_msg)
    parser.add_option("-r", "--result_dir",
                      help="Result directories from veto_report. Required.")
    parser.add_option("-o", "--out_dir", default="inserted_segs",
                      help="Output directory name. The xml files will be saved in this directly. (Default: inserted_segs)")
    parser.add_option("-x", "--write_xml", action="store_true", default=False,
                      help="Write xml file containing veto segments for each channel. (Default: False)")
    parser.add_option("-i", "--insert", action="store_true", default=False,
                      help="Insert segs into a database. (Default: False)")
    parser.add_option("-s", "--segment-url", default="https://segdb.ligo.caltech.edu",
                      help="")
    parser.add_option("-t", "--trigger_type", 
                      help="trigger type (KW or IHOPE) used.")
    parser.add_option("-w", "--web_address",
                      help="Web address to find the summary report. Required.")
    parser.add_option("-u", "--unsafe_channels",action="append",default=[" "],
                      help="Code won't insert channels specified. Can be provided multiple times to specify more than one channel.")
    parser.add_option("-l", "--scratch_dir", default=".",
                      help="Scratch directory to be used for database engine. Specify local scratch directory for better performance and less fileserver load. (Default: current directory)")
    parser.add_option("-v", "--verbose", action="store_true", default=False,
                      help="Run verbosely. (Default: False)")
    
    opts, args = parser.parse_args()

    # check if necessary input exists
    if opts.result_dir is None:
      parser.error("Error: --result_dir is a required parameter")
    if opts.web_address is None:
      parser.error("Error: --web_address is a required parameter")
    # make an output directory if it doesn't exist yet
    if not os.path.exists(opts.out_dir): 
      os.makedirs(opts.out_dir)
    opts.unsafe_channels = map(lambda x:x.upper(),opts.unsafe_channels)
    # check if trigger type is valid
    if opts.trigger_type not in ("KW","MBTA","IHOPE"):
      parser.error("Error: --trigger_type must be KW, MBTA or IHOPE")
    # convert channel names to "standard way" if not already
    opts.unsafe_channels = map(lambda x:x.upper().replace("-","_"),opts.unsafe_channels)
        
    # show parameters
    if opts.verbose:
        print >> sys.stderr, ""
        print >> sys.stderr, "running %prog..."
        print >> sys.stderr, git_version.verbose_msg
        print >> sys.stderr, ""
        print >> sys.stderr, "***************** PARAMETERS ********************"
        for o in opts.__dict__.items():
          print >> sys.stderr, o[0]+":"
          print >> sys.stderr, o[1]
        print >> sys.stderr, ""
        
    return opts


# =============================================================================
#
#                                  MAIN
# 
# =============================================================================

# parse commandline
opts = parse_commandline()


# compile the unsafe channel list   
unsafe_channels = "|".join(opts.unsafe_channels)
print unsafe_channels
unsafe = re.compile(unsafe_channels,re.I) # re.I so that it's case insensitive

# Figure out channels in the result dir and get info
# Make a list of the result files from veto_report
dir_list = os.listdir(opts.result_dir)

veto_info = {}

## figure out which channel gets over a critical used percentage
try:
  for chan_dir in dir_list:
    chan_dir = os.path.abspath(os.path.join(opts.result_dir,chan_dir))
    already_inserted = False 

    try:
      ## retrieve info


      if opts.verbose:
        print >> sys.stderr, "gathering infomation from %s..."%(chan_dir)
      # Figure out channel name from directory name
      # Assumption is that tag doesn't contain "-" (checked in veto_setup)
      chan_file = os.path.basename(chan_dir)
      chan_name = chan_file.split("-",2)[-1]
      ifo = chan_name[:2].upper()

      channel_info = bcvUtils.read_summary(os.path.join(chan_dir,"summary.txt"))
      startGPS = int(channel_info['analysisStartTime'])
      endGPS = int(channel_info['analysisEndTime'])
      reqAccVetoRate = channel_info['reqAccVetoRate'].upper().replace("-","_NEG")

      if channel_info['safety'] != "Unsafe" and not unsafe.search(chan_name):
        # get segments in the database to see what the code needs to do
        name = "BCV-%s_%s_%s"%(opts.trigger_type,chan_name.replace("-","_"),reqAccVetoRate)
        name = name.replace(".","P").upper()
        name = name.replace(":","_").upper()
        name = name.replace("+","_").upper()
        flag = "%s:%s"%(ifo,name)

        tmpSegFile = os.path.join(opts.scratch_dir, "tmp_%s_%d_%d.segs"%(chan_name,startGPS,endGPS))
        gpsNow = int(os.popen('tconvert now').readline())

        cmd = "ligolw_segment_query --database --query-segments --include-segments %s --gps-start-time 0 --gps-end-time %d --output-file %s"%(flag,gpsNow,tmpSegFile)
        exit = os.system(cmd)
        if exit > 0:
          print >> sys.stderr, "failed:\n %s"%cmd
          sys.exit(1)

        # print >> sys.stderr, "tmpSegFile: %s"%tmpSegFile

        # what was in the segment database
	try:
        	cur_segs = bcvUtils.read_segfile_xml(tmpSegFile,opts.verbose)
        	cur_segs.coalesce() 
	except:
		print >> sys.stderr, "cur_segs failed: setting to 0!\n"
		cur_segs = 0	
 
        # segments we are trying to insert
        veto_segs = bcvUtils.read_segfile(os.path.join(chan_dir,"vetoSegments.txt"))
        # cut by analysis segment
        veto_segs &= segmentlist([segment(startGPS,endGPS)])
        veto_segs.coalesce()

        # get version
        max_version = max(map(int,os.popen("ligolw_print -t segment_definer -c version %s | head -n 1"%tmpSegFile).readlines()))
        print >> sys.stderr, "current version: %d"%max_version

        # prepare
        if abs(veto_segs) == 0:
          print >> sys.stderr, "Warning: no veto segments. Skipping..."
          continue
        if abs(cur_segs) == 0:
          if opts.verbose:
            print >> sys.stderr, "No segments with this name found. Inserting..."
          operation = "--insert"
          version = 1
        else:
          last_seg = cur_segs[-1]
          cur_segs &= segmentlist([segment(startGPS,endGPS)])

          if abs(cur_segs) == 0:
            if veto_segs[0][0] > last_seg[-1]:
              if opts.verbose:
                print >> sys.stderr, "The segments with this name already exists. Appending..."
              operation = "--append"
              version = max_version
            else:
              operation = "--insert"
              version = max_version + 1
              print >> sys.stderr, "Segments in the future are already inserted. Inserting the segments as version %d."%version
          elif cur_segs == veto_segs:
            version = bcvUtils.find_version_xml(tmpSegFile,segment(startGPS,endGPS),False)
            print >> sys.stderr, "%s:%d already exists."%(name,version)
            print >> sys.stderr, "skipping..."
            already_inserted = True
          else:
            operation = "--insert"
            version = max_version + 1
            print >> sys.stderr, "Warning: a different set of veto segments already exist for this period. Inserting the segments as version %d."%version

        explain = "Bilinear Coupling Veto segments from %s with |r| threshold %s and required accidental veto rate %s Hz."%(chan_name,channel_info['rThresh'],channel_info["reqAccVetoRate"])

        # store information necessary to constract veto definer file
        veto_info[chan_name] = (ifo,name,version,explain,startGPS,endGPS)

        # skip if segments are already in the database
        if already_inserted:
          continue
   
        comment = opts.web_address
   
        summary_seg = os.path.join(opts.scratch_dir,"%d_%d_summary_seg.txt"%(startGPS,endGPS))
        open(summary_seg,'w').write("%d %d"%(startGPS,endGPS))
  
        seg_file = os.path.join(opts.scratch_dir,"%s_veto_segs.segs"%(chan_name))
        bcvUtils.write_segs(veto_segs,seg_file)
  
        duration = endGPS - startGPS

        cmd = 'ligolw_segment_insert --segment-url %s --ifos %s --name "%s" --version %d --explain "%s" --comment "%s" --summary-file %s --segment-file %s %s'%(opts.segment_url,ifo,name,version,explain,comment,summary_seg,seg_file,operation)
        print >> sys.stderr, "%s:%d"%(name,version)
        if opts.write_xml:
          outfile = "%s-%s-%s.xml"%(name,startGPS,duration)
          outfile = os.path.join(opts.out_dir,outfile) 
          if os.path.isfile(outfile):
            os.system("rm -f %s"%outfile)
          cmd1 = cmd + " --output %s"%outfile
          if opts.verbose:
            print >> sys.stderr, "writing to output file %s..."%outfile 
            print >> sys.stderr, cmd1
          exit = os.system(cmd1)
          if exit > 0:
            print >> sys.stderr, "Error: failed to write segments."
            sys.exit(1)
  
        if opts.insert:
          if opts.verbose:
            print >> sys.stderr, "inserting segments..."
            print >> sys.stderr, cmd
          exit = os.system(cmd)
          if exit > 0:
            print >> sys.stderr, "Error: failed to insert segments."
            sys.exit(1)
            
    finally:
      # erase tmp segment
      if globals().has_key('tmpSegFile'):
        ts = globals()['tmpSegFile']
        if opts.verbose:
          print >> sys.stderr, "removing tmpSegFile '%s'..." % ts
        if os.path.isfile(ts):
          os.remove(ts)
      # erase veto segment
      if globals().has_key('seg_file'):
        vs = globals()['seg_file']
        if opts.verbose:
          print >> sys.stderr, "removing seg_file '%s'..." % vs
        if os.path.isfile(vs):
          os.remove(vs)
      
finally:  
  # erase summary segment
  if globals().has_key("summary_seg"):
    summmary_seg = globals()["summary_seg"]
    if opts.verbose:
      print >> sys.stderr, "removing tmp summary file %s..."%summary_seg
    os.remove(summary_seg)

# create a veto definer file

# preamble
from glue.ligolw import ligolw
from glue.ligolw import utils
from glue.ligolw import lsctables
from glue.ligolw.utils import ligolw_add
from glue.ligolw.utils import process

del lsctables.SegmentTable.validcolumns['start_time_ns']
del lsctables.SegmentTable.validcolumns['end_time_ns']
del lsctables.ProcessTable.validcolumns['domain']
del lsctables.ProcessTable.validcolumns['jobid']
del lsctables.ProcessTable.validcolumns['is_online']

# prepare xml file
doc = ligolw.Document()
doc.appendChild(ligolw.LIGO_LW())
process_id = process.append_process(doc).process_id
veto_definer_table = lsctables.New(lsctables.VetoDefTable, columns = ["process_id","ifo","name","version","category","start_time","end_time","start_pad","end_pad","comment"])
doc.childNodes[0].appendChild(veto_definer_table)

if opts.verbose:
  print >> sys.stderr, "Inserted segs:"

for c in veto_info.keys():
  if opts.verbose: 
    print >> sys.stderr, "%s:%d"%(veto_info[c][1],veto_info[c][2])
  # append the info in veto_definer
  veto_definer = lsctables.VetoDef()
  veto_definer.process_id = process_id
  veto_definer.ifo = veto_info[c][0]
  veto_definer.name = veto_info[c][1]
  veto_definer.version = veto_info[c][2]
  veto_definer.start_time = veto_info[c][4]
  veto_definer.end_time = veto_info[c][5]
  veto_definer.comment = veto_info[c][3]
  veto_definer.category = 4
  veto_definer.start_pad = 0
  veto_definer.end_pad = 0
  veto_definer_table.append(veto_definer)

# write to veto definer file
utils.write_filename(doc,os.path.join(opts.out_dir,"veto_definer_file.xml"))

if opts.verbose: print >> sys.stderr, "veto_insert done!"

