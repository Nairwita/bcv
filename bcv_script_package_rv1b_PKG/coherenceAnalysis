#!/usr/bin/python


import os
import sys
import shutil
import re
import optparse
import os.path

from bcv import git_version

# =============================================================================
#
#                               PREAMBLE
#
# =============================================================================

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser(usage = __doc__,version=git_version.verbose_msg)

    parser.add_option("-c", "--Count_Limit",
                      help="Limit on how many items from the" \
		      "provided list will be processed (negative value to process all).", default = -1)
    parser.add_option("-t", "--triggerFile",
                      help="Text file with times to be analyzed.")
    parser.add_option("-A", "--A_channel",
                      help="A Channel with GW channel on (1 = on, 0 = off).",default = 1)
    parser.add_option("-B", "--B_channel",
                      help="B Channel with GW channel on (1 = on, 0 = off).",default = 1)
    parser.add_option("-C", "--C_channel",
                      help="A Channel with B channel on (1 = on, 0 = off).",default = 1)
    parser.add_option("-i", "--ini_file",
                      help=".ini file used with bcv pipeline.")

    opts, args = parser.parse_args()
    return opts

# =============================================================================
#
#                                    Main
#
# =============================================================================

def main():
        ## parse the command line
        opts = parse_commandline()

	trigFile = open(opts.triggerFile,'r')
	sliceIndex = 28  # hard coded for now
	A = int(opts.A_channel)
	B = int(opts.B_channel)
	C = int(opts.C_channel)
	count = int(opts.Count_Limit)
	counter = 0
	folderCount = 0	

	if not os.path.exists("bcvCoherTime_Results"):
                os.mkdir("bcvCoherTime_Results",0777)
        else:  # rename if this path exists and make a clean folder
                resStr = "bcvCoherTime_Results"
                renres = resStr
                num = 1
                while os.path.isdir(renres):
                        renres = resStr + "_" + str(num)
                        num = num + 1
                os.rename(resStr,renres)
                os.mkdir(resStr,0777)

	items = trigFile.readline()

	while ((items != '') and (counter != (count))):
		
		print >> sys.stderr, "Line %d of %d requested."%((counter + 1),count)
		
		item = items.split()
	        GW = item[0]
		pChannel = item[1]
		centralTime = float(item[3])
	
		pChannel = pChannel[sliceIndex:]
		pChannel = pChannel.split("+")
		channelA = pChannel[0]
		channelB = pChannel[1]

		#folderCount = folderCount + 1
		#print >> sys.stderr, "%s"%GW
		#print >> sys.stderr, "%s"%channelA
		#print >> sys.stderr, "%s"%channelB
		#print >> sys.stderr, "%lf"%centralTime
		if A:
			folderCount = folderCount + 1
			cmd = "bcvCoherenceTime -c %lf -f %s -F %s -C %d"%(centralTime,GW,channelA, folderCount) 
			print >> sys.stderr, "%s"%cmd
			print >> sys.stderr, "Analyzing Channel A + GW..."
			os.system(cmd)
		if B:
			folderCount = folderCount + 1
			cmd = "bcvCoherenceTime -c %lf -f %s -F %s -C %d"%(centralTime,GW,channelB, folderCount)
                	print >> sys.stderr, "%s"%cmd
			print >> sys.stderr, "Analyzing Channel B + GW..."
        	        os.system(cmd)
		if C:
			folderCount = folderCount + 1
			cmd = "bcvCoherenceTime -c %lf -f %s -F %s -C %d"%(centralTime,channelA,channelB, folderCount)
                	print >> sys.stderr, "%s"%cmd
			print >> sys.stderr, "Analyzing Channel A + Channel B"
        	        os.system(cmd)
		
		counter = counter + 1
		items = trigFile.readline()
#		if count:
#			if counter == count:
#				print >> sys.stderr, "Count limit (%d of %d) reached. Exiting analysis loop."%(counter,count)
#				print >> sys.stderr, "Done!"
#				sys.exit()
#			else:
#				counter = counter + 1
#				print >> sys.stderr, "Line %d of %d requested."%(counter,count)
		if counter == count:
			print >> sys.stderr, "Count limit (%d of %d) reached. Exiting analysis loop."%(counter,count)
	trigFile.close()
	
	print "Plotting..."
	os.system("bcvCoherPlot")
	
	print "Creating .html files and transferring..."
	os.system("bcvCohHtml -i %s"%opts.ini_file)

	print >> sys.stderr, "Done!"

if __name__ == "__main__":
    main()

